// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/entities/calendar_event.dart';
import 'model/entities/course.dart';
import 'model/entities/course_units/course_unit.dart';
import 'model/entities/exam.dart';
import 'model/entities/lecture.dart';
import 'model/entities/reference.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1282078294600984674),
      name: 'CalendarEvent',
      lastPropertyId: const obx_int.IdUid(3, 381926551226788625),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4033527293936137165),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8909113994729760298),
            name: 'date',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 381926551226788625),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8675366484836096652),
      name: 'Course',
      lastPropertyId: const obx_int.IdUid(8, 7516453715894077101),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6693337178310622139),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5968816563077690660),
            name: 'festId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8352242554683239906),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6967076844701458799),
            name: 'abbreviation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7069399866662414802),
            name: 'currYear',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5091443013664121705),
            name: 'firstEnrollment',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2590504996936759592),
            name: 'faculty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7516453715894077101),
            name: 'state',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8606367197743419285),
      name: 'CourseUnit',
      lastPropertyId: const obx_int.IdUid(14, 2734846034862179313),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4059327112873521171),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6314508060700589980),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4441767257327531984),
            name: 'abbreviation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7314046089562804923),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5398713922567031658),
            name: 'curricularYear',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4400388167690120723),
            name: 'occurrId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7157429061110516539),
            name: 'semesterCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4225799442434787171),
            name: 'semesterName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8298144324313693241),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3560245685099034797),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7907986506551086750),
            name: 'grade',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3673988274749402069),
            name: 'ectsGrade',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6100961952833728356),
            name: 'result',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 2734846034862179313),
            name: 'schoolYear',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2579774160859864830),
      name: 'Exam',
      lastPropertyId: const obx_int.IdUid(8, 491517557507458678),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2196207639634913880),
            name: 'start',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3729564035274264858),
            name: 'finish',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3133274530111794602),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6711698619183343163),
            name: 'subject',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 677641576668648072),
            name: 'rooms',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1114545630923699413),
            name: 'examType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4355179240898207274),
            name: 'faculty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 491517557507458678),
            name: 'dbId',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 6698030530264131453),
      name: 'Lecture',
      lastPropertyId: const obx_int.IdUid(8, 5986240157077815772),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2070176690620753601),
            name: 'subject',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6802958449824815488),
            name: 'typeClass',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8507351049445019336),
            name: 'room',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7313018287800749129),
            name: 'teacher',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1957799666425753042),
            name: 'classNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1905985280725841609),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2733781175981363556),
            name: 'endTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5986240157077815772),
            name: 'occurrId',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 4678066265661137807),
      name: 'Reference',
      lastPropertyId: const obx_int.IdUid(6, 5311987958607203015),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1046551201227121237),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1993365677082125066),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3398350898683096534),
            name: 'limitDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2618665766228184797),
            name: 'entity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1523101714740854078),
            name: 'reference',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5311987958607203015),
            name: 'amount',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 4678066265661137807),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CalendarEvent: obx_int.EntityDefinition<CalendarEvent>(
        model: _entities[0],
        toOneRelations: (CalendarEvent object) => [],
        toManyRelations: (CalendarEvent object) => {},
        getId: (CalendarEvent object) => object.id,
        setId: (CalendarEvent object, int id) {
          object.id = id;
        },
        objectToFB: (CalendarEvent object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final dateOffset = fbb.writeString(object.date);
          fbb.startTable(4);
          fbb.addOffset(0, nameOffset);
          fbb.addOffset(1, dateOffset);
          fbb.addInt64(2, object.id ?? 0);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 4, '');
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = CalendarEvent(nameParam, dateParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);

          return object;
        }),
    Course: obx_int.EntityDefinition<Course>(
        model: _entities[1],
        toOneRelations: (Course object) => [],
        toManyRelations: (Course object) => {},
        getId: (Course object) => object.id,
        setId: (Course object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Course.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Course object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final abbreviationOffset = object.abbreviation == null
              ? null
              : fbb.writeString(object.abbreviation!);
          final currYearOffset = object.currYear == null
              ? null
              : fbb.writeString(object.currYear!);
          final facultyOffset =
              object.faculty == null ? null : fbb.writeString(object.faculty!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.festId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, abbreviationOffset);
          fbb.addOffset(4, currYearOffset);
          fbb.addInt64(5, object.firstEnrollment);
          fbb.addOffset(6, facultyOffset);
          fbb.addOffset(7, stateOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final festIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final abbreviationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final currYearParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final firstEnrollmentParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final stateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final facultyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = Course(
              id: idParam,
              festId: festIdParam,
              name: nameParam,
              abbreviation: abbreviationParam,
              currYear: currYearParam,
              firstEnrollment: firstEnrollmentParam,
              state: stateParam,
              faculty: facultyParam);

          return object;
        }),
    CourseUnit: obx_int.EntityDefinition<CourseUnit>(
        model: _entities[2],
        toOneRelations: (CourseUnit object) => [],
        toManyRelations: (CourseUnit object) => {},
        getId: (CourseUnit object) => object.id,
        setId: (CourseUnit object, int id) {
          object.id = id;
        },
        objectToFB: (CourseUnit object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          final abbreviationOffset = fbb.writeString(object.abbreviation);
          final nameOffset = fbb.writeString(object.name);
          final semesterCodeOffset = object.semesterCode == null
              ? null
              : fbb.writeString(object.semesterCode!);
          final semesterNameOffset = object.semesterName == null
              ? null
              : fbb.writeString(object.semesterName!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final gradeOffset =
              object.grade == null ? null : fbb.writeString(object.grade!);
          final ectsGradeOffset = object.ectsGrade == null
              ? null
              : fbb.writeString(object.ectsGrade!);
          final resultOffset =
              object.result == null ? null : fbb.writeString(object.result!);
          final schoolYearOffset = object.schoolYear == null
              ? null
              : fbb.writeString(object.schoolYear!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, codeOffset);
          fbb.addOffset(2, abbreviationOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.curricularYear);
          fbb.addInt64(5, object.occurrId);
          fbb.addOffset(6, semesterCodeOffset);
          fbb.addOffset(7, semesterNameOffset);
          fbb.addOffset(8, typeOffset);
          fbb.addOffset(9, statusOffset);
          fbb.addOffset(10, gradeOffset);
          fbb.addOffset(11, ectsGradeOffset);
          fbb.addOffset(12, resultOffset);
          fbb.addOffset(13, schoolYearOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final abbreviationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final occurrIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final curricularYearParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final semesterCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final semesterNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final gradeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final ectsGradeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final resultParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final schoolYearParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final object = CourseUnit(
              abbreviation: abbreviationParam,
              name: nameParam,
              occurrId: occurrIdParam,
              id: idParam,
              code: codeParam,
              curricularYear: curricularYearParam,
              semesterCode: semesterCodeParam,
              semesterName: semesterNameParam,
              type: typeParam,
              status: statusParam,
              grade: gradeParam,
              ectsGrade: ectsGradeParam,
              result: resultParam,
              schoolYear: schoolYearParam);

          return object;
        }),
    Exam: obx_int.EntityDefinition<Exam>(
        model: _entities[3],
        toOneRelations: (Exam object) => [],
        toManyRelations: (Exam object) => {},
        getId: (Exam object) => object.dbId,
        setId: (Exam object, int id) {
          object.dbId = id;
        },
        objectToFB: (Exam object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final subjectOffset = fbb.writeString(object.subject);
          final roomsOffset = fbb.writeList(
              object.rooms.map(fbb.writeString).toList(growable: false));
          final examTypeOffset = fbb.writeString(object.examType);
          final facultyOffset = fbb.writeString(object.faculty);
          fbb.startTable(9);
          fbb.addInt64(0, object.start.millisecondsSinceEpoch);
          fbb.addInt64(1, object.finish.millisecondsSinceEpoch);
          fbb.addOffset(2, idOffset);
          fbb.addOffset(3, subjectOffset);
          fbb.addOffset(4, roomsOffset);
          fbb.addOffset(5, examTypeOffset);
          fbb.addOffset(6, facultyOffset);
          fbb.addInt64(7, object.dbId ?? 0);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final startParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final finishParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final subjectParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final roomsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final examTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final facultyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = Exam(idParam, startParam, finishParam, subjectParam,
              roomsParam, examTypeParam, facultyParam)
            ..dbId = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 18);

          return object;
        }),
    Lecture: obx_int.EntityDefinition<Lecture>(
        model: _entities[4],
        toOneRelations: (Lecture object) => [],
        toManyRelations: (Lecture object) => {},
        getId: (Lecture object) => object.occurrId,
        setId: (Lecture object, int id) {
          object.occurrId = id;
        },
        objectToFB: (Lecture object, fb.Builder fbb) {
          final subjectOffset = fbb.writeString(object.subject);
          final typeClassOffset = fbb.writeString(object.typeClass);
          final roomOffset = fbb.writeString(object.room);
          final teacherOffset = fbb.writeString(object.teacher);
          final classNumberOffset = fbb.writeString(object.classNumber);
          fbb.startTable(9);
          fbb.addOffset(0, subjectOffset);
          fbb.addOffset(1, typeClassOffset);
          fbb.addOffset(2, roomOffset);
          fbb.addOffset(3, teacherOffset);
          fbb.addOffset(4, classNumberOffset);
          fbb.addInt64(5, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(6, object.endTime.millisecondsSinceEpoch);
          fbb.addInt64(7, object.occurrId);
          fbb.finish(fbb.endTable());
          return object.occurrId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final subjectParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 4, '');
          final typeClassParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final endTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final roomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final teacherParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final classNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final occurrIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = Lecture(
              subjectParam,
              typeClassParam,
              startTimeParam,
              endTimeParam,
              roomParam,
              teacherParam,
              classNumberParam,
              occurrIdParam);

          return object;
        }),
    Reference: obx_int.EntityDefinition<Reference>(
        model: _entities[5],
        toOneRelations: (Reference object) => [],
        toManyRelations: (Reference object) => {},
        getId: (Reference object) => object.id,
        setId: (Reference object, int id) {
          object.id = id;
        },
        objectToFB: (Reference object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, descriptionOffset);
          fbb.addInt64(2, object.limitDate.millisecondsSinceEpoch);
          fbb.addInt64(3, object.entity);
          fbb.addInt64(4, object.reference);
          fbb.addFloat64(5, object.amount);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final limitDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final entityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final referenceParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = Reference(descriptionParam, limitDateParam,
              entityParam, referenceParam, amountParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CalendarEvent] entity fields to define ObjectBox queries.
class CalendarEvent_ {
  /// See [CalendarEvent.name].
  static final name =
      obx.QueryStringProperty<CalendarEvent>(_entities[0].properties[0]);

  /// See [CalendarEvent.date].
  static final date =
      obx.QueryStringProperty<CalendarEvent>(_entities[0].properties[1]);

  /// See [CalendarEvent.id].
  static final id =
      obx.QueryIntegerProperty<CalendarEvent>(_entities[0].properties[2]);
}

/// [Course] entity fields to define ObjectBox queries.
class Course_ {
  /// See [Course.id].
  static final id =
      obx.QueryIntegerProperty<Course>(_entities[1].properties[0]);

  /// See [Course.festId].
  static final festId =
      obx.QueryIntegerProperty<Course>(_entities[1].properties[1]);

  /// See [Course.name].
  static final name =
      obx.QueryStringProperty<Course>(_entities[1].properties[2]);

  /// See [Course.abbreviation].
  static final abbreviation =
      obx.QueryStringProperty<Course>(_entities[1].properties[3]);

  /// See [Course.currYear].
  static final currYear =
      obx.QueryStringProperty<Course>(_entities[1].properties[4]);

  /// See [Course.firstEnrollment].
  static final firstEnrollment =
      obx.QueryIntegerProperty<Course>(_entities[1].properties[5]);

  /// See [Course.faculty].
  static final faculty =
      obx.QueryStringProperty<Course>(_entities[1].properties[6]);

  /// See [Course.state].
  static final state =
      obx.QueryStringProperty<Course>(_entities[1].properties[7]);
}

/// [CourseUnit] entity fields to define ObjectBox queries.
class CourseUnit_ {
  /// See [CourseUnit.id].
  static final id =
      obx.QueryIntegerProperty<CourseUnit>(_entities[2].properties[0]);

  /// See [CourseUnit.code].
  static final code =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[1]);

  /// See [CourseUnit.abbreviation].
  static final abbreviation =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[2]);

  /// See [CourseUnit.name].
  static final name =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[3]);

  /// See [CourseUnit.curricularYear].
  static final curricularYear =
      obx.QueryIntegerProperty<CourseUnit>(_entities[2].properties[4]);

  /// See [CourseUnit.occurrId].
  static final occurrId =
      obx.QueryIntegerProperty<CourseUnit>(_entities[2].properties[5]);

  /// See [CourseUnit.semesterCode].
  static final semesterCode =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[6]);

  /// See [CourseUnit.semesterName].
  static final semesterName =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[7]);

  /// See [CourseUnit.type].
  static final type =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[8]);

  /// See [CourseUnit.status].
  static final status =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[9]);

  /// See [CourseUnit.grade].
  static final grade =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[10]);

  /// See [CourseUnit.ectsGrade].
  static final ectsGrade =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[11]);

  /// See [CourseUnit.result].
  static final result =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[12]);

  /// See [CourseUnit.schoolYear].
  static final schoolYear =
      obx.QueryStringProperty<CourseUnit>(_entities[2].properties[13]);
}

/// [Exam] entity fields to define ObjectBox queries.
class Exam_ {
  /// See [Exam.start].
  static final start = obx.QueryDateProperty<Exam>(_entities[3].properties[0]);

  /// See [Exam.finish].
  static final finish = obx.QueryDateProperty<Exam>(_entities[3].properties[1]);

  /// See [Exam.id].
  static final id = obx.QueryStringProperty<Exam>(_entities[3].properties[2]);

  /// See [Exam.subject].
  static final subject =
      obx.QueryStringProperty<Exam>(_entities[3].properties[3]);

  /// See [Exam.rooms].
  static final rooms =
      obx.QueryStringVectorProperty<Exam>(_entities[3].properties[4]);

  /// See [Exam.examType].
  static final examType =
      obx.QueryStringProperty<Exam>(_entities[3].properties[5]);

  /// See [Exam.faculty].
  static final faculty =
      obx.QueryStringProperty<Exam>(_entities[3].properties[6]);

  /// See [Exam.dbId].
  static final dbId =
      obx.QueryIntegerProperty<Exam>(_entities[3].properties[7]);
}

/// [Lecture] entity fields to define ObjectBox queries.
class Lecture_ {
  /// See [Lecture.subject].
  static final subject =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[0]);

  /// See [Lecture.typeClass].
  static final typeClass =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[1]);

  /// See [Lecture.room].
  static final room =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[2]);

  /// See [Lecture.teacher].
  static final teacher =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[3]);

  /// See [Lecture.classNumber].
  static final classNumber =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[4]);

  /// See [Lecture.startTime].
  static final startTime =
      obx.QueryDateProperty<Lecture>(_entities[4].properties[5]);

  /// See [Lecture.endTime].
  static final endTime =
      obx.QueryDateProperty<Lecture>(_entities[4].properties[6]);

  /// See [Lecture.occurrId].
  static final occurrId =
      obx.QueryIntegerProperty<Lecture>(_entities[4].properties[7]);
}

/// [Reference] entity fields to define ObjectBox queries.
class Reference_ {
  /// See [Reference.id].
  static final id =
      obx.QueryIntegerProperty<Reference>(_entities[5].properties[0]);

  /// See [Reference.description].
  static final description =
      obx.QueryStringProperty<Reference>(_entities[5].properties[1]);

  /// See [Reference.limitDate].
  static final limitDate =
      obx.QueryDateProperty<Reference>(_entities[5].properties[2]);

  /// See [Reference.entity].
  static final entity =
      obx.QueryIntegerProperty<Reference>(_entities[5].properties[3]);

  /// See [Reference.reference].
  static final reference =
      obx.QueryIntegerProperty<Reference>(_entities[5].properties[4]);

  /// See [Reference.amount].
  static final amount =
      obx.QueryDoubleProperty<Reference>(_entities[5].properties[5]);
}
