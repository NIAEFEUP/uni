// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/entities/calendar_event.dart';
import 'model/entities/course.dart';
import 'model/entities/course_units/course_unit.dart';
import 'model/entities/exam.dart';
import 'model/entities/floor_occupation.dart';
import 'model/entities/lecture.dart';
import 'model/entities/meal.dart';
import 'model/entities/profile.dart';
import 'model/entities/reference.dart';
import 'model/entities/restaurant.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 9023334941434171613),
      name: 'Course',
      lastPropertyId: const obx_int.IdUid(8, 2569902177271788084),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 638675882194171923),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7399762242385500305),
            name: 'festId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 765009141428697431),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4662230105235105175),
            name: 'abbreviation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3585081745958658946),
            name: 'currYear',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8706009963740244663),
            name: 'firstEnrollment',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2200510302152442506),
            name: 'faculty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2569902177271788084),
            name: 'state',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3729519930345414950),
      name: 'CourseUnit',
      lastPropertyId: const obx_int.IdUid(15, 1908906956891695493),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 51289598716893822),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6042248720380263508),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3616465087214285565),
            name: 'abbreviation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 957276154337921160),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5714785314745896032),
            name: 'curricularYear',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1253372657687947350),
            name: 'occurrId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8552160016719686479),
            name: 'semesterCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 664839204759600232),
            name: 'semesterName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4423759702390545498),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 9002527568096695488),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2156977366360666414),
            name: 'grade',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3518147179992921966),
            name: 'ectsGrade',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6310456529306909940),
            name: 'result',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3610253024990071574),
            name: 'schoolYear',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1908906956891695493),
            name: 'festId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 78099361207870468),
      name: 'Exam',
      lastPropertyId: const obx_int.IdUid(9, 5211756815377605164),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2514250645840105248),
            name: 'start',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6990865767058063886),
            name: 'finish',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5782888562955020913),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6593510366522421352),
            name: 'subject',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7975353565389382656),
            name: 'rooms',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1313847998489774486),
            name: 'examType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3226518357131834262),
            name: 'faculty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9042264460759528897),
            name: 'dbId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5211756815377605164),
            name: 'subjectAcronym',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8914657122400384041),
      name: 'FloorOccupation',
      lastPropertyId: const obx_int.IdUid(3, 1484006940114121250),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4904155046604150319),
            name: 'number',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8561536948984092746),
            name: 'occupation',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1484006940114121250),
            name: 'capacity',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 2088655015871788343),
      name: 'Lecture',
      lastPropertyId: const obx_int.IdUid(9, 1980793363502664287),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2007149336073656756),
            name: 'subject',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1265389168378137750),
            name: 'typeClass',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6056134072659928748),
            name: 'room',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6111247732828377360),
            name: 'teacher',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 729332401215471712),
            name: 'classNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7625685149678076824),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7072477928869543615),
            name: 'endTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6414981311969213465),
            name: 'occurrId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1980793363502664287),
            name: 'acronym',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 7917687019476141119),
      name: 'Reference',
      lastPropertyId: const obx_int.IdUid(6, 9116264944084365411),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5289471998983910200),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 533778876528519150),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3667218734384861506),
            name: 'limitDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5928422030732335008),
            name: 'entity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3339770249802415137),
            name: 'reference',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 9116264944084365411),
            name: 'amount',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 4515966536170961118),
      name: 'Profile',
      lastPropertyId: const obx_int.IdUid(6, 404969813464949614),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4821223422152753319),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3109289559488995371),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1076693008672503872),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7936654982277352457),
            name: 'printBalance',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8258121621474177508),
            name: 'feesBalance',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 404969813464949614),
            name: 'feesLimit',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 8593806623526644439),
      name: 'Restaurant',
      lastPropertyId: const obx_int.IdUid(10, 2718701455368770980),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8412443093606687605),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2346213477361850697),
            name: 'namePt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5477430405475543381),
            name: 'nameEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 276897755102017976),
            name: 'period',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5740732395773374659),
            name: 'reference',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1619262703215131232),
            name: 'uniqueId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7030617389033595119),
            name: 'typePt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3942026488437724941),
            name: 'typeEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7758398535926698966),
            name: 'openingHours',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2718701455368770980),
            name: 'email',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'meals', srcEntity: 'Meal', srcField: 'restaurant')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 7804684898880346326),
      name: 'Meal',
      lastPropertyId: const obx_int.IdUid(11, 1685783699901555017),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2217941936139097442),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4514448927584280007),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6516233270701917997),
            name: 'namePt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7870030775251025092),
            name: 'nameEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9026414350313814339),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8226375929086131956),
            name: 'dbDayOfWeek',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1685783699901555017),
            name: 'restaurantId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 1655954202899126503),
            relationTarget: 'Restaurant')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 7766497325520663084),
      name: 'CalendarEvent',
      lastPropertyId: const obx_int.IdUid(5, 6182058402376906364),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6002512766888793929),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3114921118509703581),
            name: 'startDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4248782243502756139),
            name: 'endDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6182058402376906364),
            name: 'uniqueId',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(11, 7766497325520663084),
      lastIndexId: const obx_int.IdUid(3, 1655954202899126503),
      lastRelationId: const obx_int.IdUid(2, 7979016610492408009),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [8291520291398480120],
      retiredIndexUids: const [6025187928432397390, 5553263973871522574],
      retiredPropertyUids: const [
        7614762063660142831,
        1965207517914420813,
        5763920349665887316,
        3569335303354936661,
        4566007506961794915,
        9151945013859193773,
        6529611542004519423,
        606101617154450710,
        2290575640408544292,
        869613549731297269
      ],
      retiredRelationUids: const [4232741166114493489, 7979016610492408009],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Course: obx_int.EntityDefinition<Course>(
        model: _entities[0],
        toOneRelations: (Course object) => [],
        toManyRelations: (Course object) => {},
        getId: (Course object) => object.id,
        setId: (Course object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Course.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Course object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final abbreviationOffset = object.abbreviation == null
              ? null
              : fbb.writeString(object.abbreviation!);
          final currYearOffset = object.currYear == null
              ? null
              : fbb.writeString(object.currYear!);
          final facultyOffset =
              object.faculty == null ? null : fbb.writeString(object.faculty!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.festId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, abbreviationOffset);
          fbb.addOffset(4, currYearOffset);
          fbb.addInt64(5, object.firstEnrollment);
          fbb.addOffset(6, facultyOffset);
          fbb.addOffset(7, stateOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final festIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final abbreviationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final currYearParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final firstEnrollmentParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final stateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final facultyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = Course(
              id: idParam,
              festId: festIdParam,
              name: nameParam,
              abbreviation: abbreviationParam,
              currYear: currYearParam,
              firstEnrollment: firstEnrollmentParam,
              state: stateParam,
              faculty: facultyParam);

          return object;
        }),
    CourseUnit: obx_int.EntityDefinition<CourseUnit>(
        model: _entities[1],
        toOneRelations: (CourseUnit object) => [],
        toManyRelations: (CourseUnit object) => {},
        getId: (CourseUnit object) => object.id,
        setId: (CourseUnit object, int id) {
          object.id = id;
        },
        objectToFB: (CourseUnit object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          final abbreviationOffset = fbb.writeString(object.abbreviation);
          final nameOffset = fbb.writeString(object.name);
          final semesterCodeOffset = object.semesterCode == null
              ? null
              : fbb.writeString(object.semesterCode!);
          final semesterNameOffset = object.semesterName == null
              ? null
              : fbb.writeString(object.semesterName!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final gradeOffset =
              object.grade == null ? null : fbb.writeString(object.grade!);
          final ectsGradeOffset = object.ectsGrade == null
              ? null
              : fbb.writeString(object.ectsGrade!);
          final resultOffset =
              object.result == null ? null : fbb.writeString(object.result!);
          final schoolYearOffset = object.schoolYear == null
              ? null
              : fbb.writeString(object.schoolYear!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, codeOffset);
          fbb.addOffset(2, abbreviationOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.curricularYear);
          fbb.addInt64(5, object.occurrId);
          fbb.addOffset(6, semesterCodeOffset);
          fbb.addOffset(7, semesterNameOffset);
          fbb.addOffset(8, typeOffset);
          fbb.addOffset(9, statusOffset);
          fbb.addOffset(10, gradeOffset);
          fbb.addOffset(11, ectsGradeOffset);
          fbb.addOffset(12, resultOffset);
          fbb.addOffset(13, schoolYearOffset);
          fbb.addInt64(14, object.festId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final abbreviationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final occurrIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final curricularYearParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final semesterCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final semesterNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final gradeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final ectsGradeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final resultParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final schoolYearParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final festIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32);
          final object = CourseUnit(
              abbreviation: abbreviationParam,
              name: nameParam,
              occurrId: occurrIdParam,
              id: idParam,
              code: codeParam,
              curricularYear: curricularYearParam,
              semesterCode: semesterCodeParam,
              semesterName: semesterNameParam,
              type: typeParam,
              status: statusParam,
              grade: gradeParam,
              ectsGrade: ectsGradeParam,
              result: resultParam,
              schoolYear: schoolYearParam,
              festId: festIdParam);

          return object;
        }),
    Exam: obx_int.EntityDefinition<Exam>(
        model: _entities[2],
        toOneRelations: (Exam object) => [],
        toManyRelations: (Exam object) => {},
        getId: (Exam object) => object.dbId,
        setId: (Exam object, int id) {
          object.dbId = id;
        },
        objectToFB: (Exam object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final subjectOffset = fbb.writeString(object.subject);
          final roomsOffset = fbb.writeList(
              object.rooms.map(fbb.writeString).toList(growable: false));
          final examTypeOffset = fbb.writeString(object.examType);
          final facultyOffset = fbb.writeString(object.faculty);
          final subjectAcronymOffset = fbb.writeString(object.subjectAcronym);
          fbb.startTable(10);
          fbb.addInt64(0, object.start.millisecondsSinceEpoch);
          fbb.addInt64(1, object.finish.millisecondsSinceEpoch);
          fbb.addOffset(2, idOffset);
          fbb.addOffset(3, subjectOffset);
          fbb.addOffset(4, roomsOffset);
          fbb.addOffset(5, examTypeOffset);
          fbb.addOffset(6, facultyOffset);
          fbb.addInt64(7, object.dbId ?? 0);
          fbb.addOffset(8, subjectAcronymOffset);
          fbb.finish(fbb.endTable());
          return object.dbId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final startParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final finishParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final subjectAcronymParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final subjectParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final roomsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final examTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final facultyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = Exam(
              idParam,
              startParam,
              finishParam,
              subjectAcronymParam,
              subjectParam,
              roomsParam,
              examTypeParam,
              facultyParam)
            ..dbId = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 18);

          return object;
        }),
    FloorOccupation: obx_int.EntityDefinition<FloorOccupation>(
        model: _entities[3],
        toOneRelations: (FloorOccupation object) => [],
        toManyRelations: (FloorOccupation object) => {},
        getId: (FloorOccupation object) => object.number,
        setId: (FloorOccupation object, int id) {
          object.number = id;
        },
        objectToFB: (FloorOccupation object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.number);
          fbb.addInt64(1, object.occupation);
          fbb.addInt64(2, object.capacity);
          fbb.finish(fbb.endTable());
          return object.number;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final numberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final occupationParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final capacityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object =
              FloorOccupation(numberParam, occupationParam, capacityParam);

          return object;
        }),
    Lecture: obx_int.EntityDefinition<Lecture>(
        model: _entities[4],
        toOneRelations: (Lecture object) => [],
        toManyRelations: (Lecture object) => {},
        getId: (Lecture object) => object.occurrId,
        setId: (Lecture object, int id) {
          object.occurrId = id;
        },
        objectToFB: (Lecture object, fb.Builder fbb) {
          final subjectOffset = fbb.writeString(object.subject);
          final typeClassOffset = fbb.writeString(object.typeClass);
          final roomOffset = fbb.writeString(object.room);
          final teacherOffset = fbb.writeString(object.teacher);
          final classNumberOffset = fbb.writeString(object.classNumber);
          final acronymOffset = fbb.writeString(object.acronym);
          fbb.startTable(10);
          fbb.addOffset(0, subjectOffset);
          fbb.addOffset(1, typeClassOffset);
          fbb.addOffset(2, roomOffset);
          fbb.addOffset(3, teacherOffset);
          fbb.addOffset(4, classNumberOffset);
          fbb.addInt64(5, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(6, object.endTime.millisecondsSinceEpoch);
          fbb.addInt64(7, object.occurrId);
          fbb.addOffset(8, acronymOffset);
          fbb.finish(fbb.endTable());
          return object.occurrId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final acronymParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final subjectParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 4, '');
          final typeClassParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final endTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final roomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final teacherParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final classNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final occurrIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = Lecture(
              acronymParam,
              subjectParam,
              typeClassParam,
              startTimeParam,
              endTimeParam,
              roomParam,
              teacherParam,
              classNumberParam,
              occurrIdParam);

          return object;
        }),
    Reference: obx_int.EntityDefinition<Reference>(
        model: _entities[5],
        toOneRelations: (Reference object) => [],
        toManyRelations: (Reference object) => {},
        getId: (Reference object) => object.id,
        setId: (Reference object, int id) {
          object.id = id;
        },
        objectToFB: (Reference object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, descriptionOffset);
          fbb.addInt64(2, object.limitDate.millisecondsSinceEpoch);
          fbb.addInt64(3, object.entity);
          fbb.addInt64(4, object.reference);
          fbb.addFloat64(5, object.amount);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final limitDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final entityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final referenceParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = Reference(descriptionParam, limitDateParam,
              entityParam, referenceParam, amountParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Profile: obx_int.EntityDefinition<Profile>(
        model: _entities[6],
        toOneRelations: (Profile object) => [],
        toManyRelations: (Profile object) => {},
        getId: (Profile object) => object.id,
        setId: (Profile object, int id) {
          object.id = id;
        },
        objectToFB: (Profile object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final printBalanceOffset = fbb.writeString(object.printBalance);
          final feesBalanceOffset = fbb.writeString(object.feesBalance);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, printBalanceOffset);
          fbb.addOffset(4, feesBalanceOffset);
          fbb.addInt64(5, object.feesLimit?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final feesLimitValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final printBalanceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final feesBalanceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final feesLimitParam = feesLimitValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(feesLimitValue);
          final object = Profile(
              name: nameParam,
              email: emailParam,
              printBalance: printBalanceParam,
              feesBalance: feesBalanceParam,
              feesLimit: feesLimitParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    Restaurant: obx_int.EntityDefinition<Restaurant>(
        model: _entities[7],
        toOneRelations: (Restaurant object) => [],
        toManyRelations: (Restaurant object) => {
              obx_int.RelInfo<Meal>.toOneBacklink(11, object.uniqueId!,
                  (Meal srcObject) => srcObject.restaurant): object.meals
            },
        getId: (Restaurant object) => object.uniqueId,
        setId: (Restaurant object, int id) {
          object.uniqueId = id;
        },
        objectToFB: (Restaurant object, fb.Builder fbb) {
          final namePtOffset = fbb.writeString(object.namePt);
          final nameEnOffset = fbb.writeString(object.nameEn);
          final periodOffset = fbb.writeString(object.period);
          final referenceOffset = fbb.writeString(object.reference);
          final typePtOffset =
              object.typePt == null ? null : fbb.writeString(object.typePt!);
          final typeEnOffset =
              object.typeEn == null ? null : fbb.writeString(object.typeEn!);
          final openingHoursOffset = fbb.writeList(
              object.openingHours.map(fbb.writeString).toList(growable: false));
          final emailOffset = fbb.writeString(object.email);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, namePtOffset);
          fbb.addOffset(2, nameEnOffset);
          fbb.addOffset(3, periodOffset);
          fbb.addOffset(4, referenceOffset);
          fbb.addInt64(5, object.uniqueId ?? 0);
          fbb.addOffset(6, typePtOffset);
          fbb.addOffset(7, typeEnOffset);
          fbb.addOffset(8, openingHoursOffset);
          fbb.addOffset(9, emailOffset);
          fbb.finish(fbb.endTable());
          return object.uniqueId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final typePtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final typeEnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final namePtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameEnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final periodParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final referenceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final openingHoursParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 20, []);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final object = Restaurant(
              idParam,
              typePtParam,
              typeEnParam,
              namePtParam,
              nameEnParam,
              periodParam,
              referenceParam,
              openingHoursParam,
              emailParam)
            ..uniqueId = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 14);
          obx_int.InternalToManyAccess.setRelInfo<Restaurant>(
              object.meals,
              store,
              obx_int.RelInfo<Meal>.toOneBacklink(11, object.uniqueId!,
                  (Meal srcObject) => srcObject.restaurant));
          return object;
        }),
    Meal: obx_int.EntityDefinition<Meal>(
        model: _entities[8],
        toOneRelations: (Meal object) => [object.restaurant],
        toManyRelations: (Meal object) => {},
        getId: (Meal object) => object.id,
        setId: (Meal object, int id) {
          object.id = id;
        },
        objectToFB: (Meal object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final namePtOffset = fbb.writeString(object.namePt);
          final nameEnOffset = fbb.writeString(object.nameEn);
          fbb.startTable(12);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, typeOffset);
          fbb.addOffset(2, namePtOffset);
          fbb.addOffset(3, nameEnOffset);
          fbb.addInt64(4, object.date.millisecondsSinceEpoch);
          fbb.addInt64(9, object.dbDayOfWeek);
          fbb.addInt64(10, object.restaurant.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final namePtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameEnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final dbDayOfWeekParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final object = Meal(typeParam, namePtParam, nameEnParam, dateParam,
              dbDayOfWeek: dbDayOfWeekParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.restaurant.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.restaurant.attach(store);
          return object;
        }),
    CalendarEvent: obx_int.EntityDefinition<CalendarEvent>(
        model: _entities[9],
        toOneRelations: (CalendarEvent object) => [],
        toManyRelations: (CalendarEvent object) => {},
        getId: (CalendarEvent object) => object.uniqueId,
        setId: (CalendarEvent object, int id) {
          object.uniqueId = id;
        },
        objectToFB: (CalendarEvent object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addOffset(0, nameOffset);
          fbb.addInt64(1, object.startDate?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.endDate?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.uniqueId ?? 0);
          fbb.finish(fbb.endTable());
          return object.uniqueId ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final startDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final endDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 4, '');
          final startDateParam = startDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(startDateValue);
          final endDateParam = endDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endDateValue);
          final object = CalendarEvent(
              name: nameParam, startDate: startDateParam, endDate: endDateParam)
            ..uniqueId = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 12);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Course] entity fields to define ObjectBox queries.
class Course_ {
  /// See [Course.id].
  static final id =
      obx.QueryIntegerProperty<Course>(_entities[0].properties[0]);

  /// See [Course.festId].
  static final festId =
      obx.QueryIntegerProperty<Course>(_entities[0].properties[1]);

  /// See [Course.name].
  static final name =
      obx.QueryStringProperty<Course>(_entities[0].properties[2]);

  /// See [Course.abbreviation].
  static final abbreviation =
      obx.QueryStringProperty<Course>(_entities[0].properties[3]);

  /// See [Course.currYear].
  static final currYear =
      obx.QueryStringProperty<Course>(_entities[0].properties[4]);

  /// See [Course.firstEnrollment].
  static final firstEnrollment =
      obx.QueryIntegerProperty<Course>(_entities[0].properties[5]);

  /// See [Course.faculty].
  static final faculty =
      obx.QueryStringProperty<Course>(_entities[0].properties[6]);

  /// See [Course.state].
  static final state =
      obx.QueryStringProperty<Course>(_entities[0].properties[7]);
}

/// [CourseUnit] entity fields to define ObjectBox queries.
class CourseUnit_ {
  /// See [CourseUnit.id].
  static final id =
      obx.QueryIntegerProperty<CourseUnit>(_entities[1].properties[0]);

  /// See [CourseUnit.code].
  static final code =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[1]);

  /// See [CourseUnit.abbreviation].
  static final abbreviation =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[2]);

  /// See [CourseUnit.name].
  static final name =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[3]);

  /// See [CourseUnit.curricularYear].
  static final curricularYear =
      obx.QueryIntegerProperty<CourseUnit>(_entities[1].properties[4]);

  /// See [CourseUnit.occurrId].
  static final occurrId =
      obx.QueryIntegerProperty<CourseUnit>(_entities[1].properties[5]);

  /// See [CourseUnit.semesterCode].
  static final semesterCode =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[6]);

  /// See [CourseUnit.semesterName].
  static final semesterName =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[7]);

  /// See [CourseUnit.type].
  static final type =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[8]);

  /// See [CourseUnit.status].
  static final status =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[9]);

  /// See [CourseUnit.grade].
  static final grade =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[10]);

  /// See [CourseUnit.ectsGrade].
  static final ectsGrade =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[11]);

  /// See [CourseUnit.result].
  static final result =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[12]);

  /// See [CourseUnit.schoolYear].
  static final schoolYear =
      obx.QueryStringProperty<CourseUnit>(_entities[1].properties[13]);

  /// See [CourseUnit.festId].
  static final festId =
      obx.QueryIntegerProperty<CourseUnit>(_entities[1].properties[14]);
}

/// [Exam] entity fields to define ObjectBox queries.
class Exam_ {
  /// See [Exam.start].
  static final start = obx.QueryDateProperty<Exam>(_entities[2].properties[0]);

  /// See [Exam.finish].
  static final finish = obx.QueryDateProperty<Exam>(_entities[2].properties[1]);

  /// See [Exam.id].
  static final id = obx.QueryStringProperty<Exam>(_entities[2].properties[2]);

  /// See [Exam.subject].
  static final subject =
      obx.QueryStringProperty<Exam>(_entities[2].properties[3]);

  /// See [Exam.rooms].
  static final rooms =
      obx.QueryStringVectorProperty<Exam>(_entities[2].properties[4]);

  /// See [Exam.examType].
  static final examType =
      obx.QueryStringProperty<Exam>(_entities[2].properties[5]);

  /// See [Exam.faculty].
  static final faculty =
      obx.QueryStringProperty<Exam>(_entities[2].properties[6]);

  /// See [Exam.dbId].
  static final dbId =
      obx.QueryIntegerProperty<Exam>(_entities[2].properties[7]);

  /// See [Exam.subjectAcronym].
  static final subjectAcronym =
      obx.QueryStringProperty<Exam>(_entities[2].properties[8]);
}

/// [FloorOccupation] entity fields to define ObjectBox queries.
class FloorOccupation_ {
  /// See [FloorOccupation.number].
  static final number =
      obx.QueryIntegerProperty<FloorOccupation>(_entities[3].properties[0]);

  /// See [FloorOccupation.occupation].
  static final occupation =
      obx.QueryIntegerProperty<FloorOccupation>(_entities[3].properties[1]);

  /// See [FloorOccupation.capacity].
  static final capacity =
      obx.QueryIntegerProperty<FloorOccupation>(_entities[3].properties[2]);
}

/// [Lecture] entity fields to define ObjectBox queries.
class Lecture_ {
  /// See [Lecture.subject].
  static final subject =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[0]);

  /// See [Lecture.typeClass].
  static final typeClass =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[1]);

  /// See [Lecture.room].
  static final room =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[2]);

  /// See [Lecture.teacher].
  static final teacher =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[3]);

  /// See [Lecture.classNumber].
  static final classNumber =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[4]);

  /// See [Lecture.startTime].
  static final startTime =
      obx.QueryDateProperty<Lecture>(_entities[4].properties[5]);

  /// See [Lecture.endTime].
  static final endTime =
      obx.QueryDateProperty<Lecture>(_entities[4].properties[6]);

  /// See [Lecture.occurrId].
  static final occurrId =
      obx.QueryIntegerProperty<Lecture>(_entities[4].properties[7]);

  /// See [Lecture.acronym].
  static final acronym =
      obx.QueryStringProperty<Lecture>(_entities[4].properties[8]);
}

/// [Reference] entity fields to define ObjectBox queries.
class Reference_ {
  /// See [Reference.id].
  static final id =
      obx.QueryIntegerProperty<Reference>(_entities[5].properties[0]);

  /// See [Reference.description].
  static final description =
      obx.QueryStringProperty<Reference>(_entities[5].properties[1]);

  /// See [Reference.limitDate].
  static final limitDate =
      obx.QueryDateProperty<Reference>(_entities[5].properties[2]);

  /// See [Reference.entity].
  static final entity =
      obx.QueryIntegerProperty<Reference>(_entities[5].properties[3]);

  /// See [Reference.reference].
  static final reference =
      obx.QueryIntegerProperty<Reference>(_entities[5].properties[4]);

  /// See [Reference.amount].
  static final amount =
      obx.QueryDoubleProperty<Reference>(_entities[5].properties[5]);
}

/// [Profile] entity fields to define ObjectBox queries.
class Profile_ {
  /// See [Profile.id].
  static final id =
      obx.QueryIntegerProperty<Profile>(_entities[6].properties[0]);

  /// See [Profile.name].
  static final name =
      obx.QueryStringProperty<Profile>(_entities[6].properties[1]);

  /// See [Profile.email].
  static final email =
      obx.QueryStringProperty<Profile>(_entities[6].properties[2]);

  /// See [Profile.printBalance].
  static final printBalance =
      obx.QueryStringProperty<Profile>(_entities[6].properties[3]);

  /// See [Profile.feesBalance].
  static final feesBalance =
      obx.QueryStringProperty<Profile>(_entities[6].properties[4]);

  /// See [Profile.feesLimit].
  static final feesLimit =
      obx.QueryDateProperty<Profile>(_entities[6].properties[5]);
}

/// [Restaurant] entity fields to define ObjectBox queries.
class Restaurant_ {
  /// See [Restaurant.id].
  static final id =
      obx.QueryIntegerProperty<Restaurant>(_entities[7].properties[0]);

  /// See [Restaurant.namePt].
  static final namePt =
      obx.QueryStringProperty<Restaurant>(_entities[7].properties[1]);

  /// See [Restaurant.nameEn].
  static final nameEn =
      obx.QueryStringProperty<Restaurant>(_entities[7].properties[2]);

  /// See [Restaurant.period].
  static final period =
      obx.QueryStringProperty<Restaurant>(_entities[7].properties[3]);

  /// See [Restaurant.reference].
  static final reference =
      obx.QueryStringProperty<Restaurant>(_entities[7].properties[4]);

  /// See [Restaurant.uniqueId].
  static final uniqueId =
      obx.QueryIntegerProperty<Restaurant>(_entities[7].properties[5]);

  /// See [Restaurant.typePt].
  static final typePt =
      obx.QueryStringProperty<Restaurant>(_entities[7].properties[6]);

  /// See [Restaurant.typeEn].
  static final typeEn =
      obx.QueryStringProperty<Restaurant>(_entities[7].properties[7]);

  /// See [Restaurant.openingHours].
  static final openingHours =
      obx.QueryStringVectorProperty<Restaurant>(_entities[7].properties[8]);

  /// See [Restaurant.email].
  static final email =
      obx.QueryStringProperty<Restaurant>(_entities[7].properties[9]);

  /// see [Restaurant.meals]
  static final meals =
      obx.QueryBacklinkToMany<Meal, Restaurant>(Meal_.restaurant);
}

/// [Meal] entity fields to define ObjectBox queries.
class Meal_ {
  /// See [Meal.id].
  static final id = obx.QueryIntegerProperty<Meal>(_entities[8].properties[0]);

  /// See [Meal.type].
  static final type = obx.QueryStringProperty<Meal>(_entities[8].properties[1]);

  /// See [Meal.namePt].
  static final namePt =
      obx.QueryStringProperty<Meal>(_entities[8].properties[2]);

  /// See [Meal.nameEn].
  static final nameEn =
      obx.QueryStringProperty<Meal>(_entities[8].properties[3]);

  /// See [Meal.date].
  static final date = obx.QueryDateProperty<Meal>(_entities[8].properties[4]);

  /// See [Meal.dbDayOfWeek].
  static final dbDayOfWeek =
      obx.QueryIntegerProperty<Meal>(_entities[8].properties[5]);

  /// See [Meal.restaurant].
  static final restaurant =
      obx.QueryRelationToOne<Meal, Restaurant>(_entities[8].properties[6]);
}

/// [CalendarEvent] entity fields to define ObjectBox queries.
class CalendarEvent_ {
  /// See [CalendarEvent.name].
  static final name =
      obx.QueryStringProperty<CalendarEvent>(_entities[9].properties[0]);

  /// See [CalendarEvent.startDate].
  static final startDate =
      obx.QueryDateProperty<CalendarEvent>(_entities[9].properties[1]);

  /// See [CalendarEvent.endDate].
  static final endDate =
      obx.QueryDateProperty<CalendarEvent>(_entities[9].properties[2]);

  /// See [CalendarEvent.uniqueId].
  static final uniqueId =
      obx.QueryIntegerProperty<CalendarEvent>(_entities[9].properties[3]);
}
